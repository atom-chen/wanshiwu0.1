//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class cs_GuiControlWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(cs.GuiControl), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("SetSortingOrder", SetSortingOrder);
		L.RegFunction("GetGuiEffectPlayer", GetGuiEffectPlayer);
		L.RegFunction("ToButton", ToButton);
		L.RegFunction("ToImage", ToImage);
		L.RegFunction("ToParticle", ToParticle);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SortingOrderOffset", get_SortingOrderOffset, null);
		L.RegVar("guiState", get_guiState, null);
		L.RegVar("ID", get_ID, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			bool o = obj.Initialize();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
				obj.Show();
				return 0;
			}
			else if (count == 2)
			{
				cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Show(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: cs.GuiControl.Show");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
				obj.Hide();
				return 0;
			}
			else if (count == 2)
			{
				cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Hide(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: cs.GuiControl.Hide");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSortingOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetSortingOrder(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuiEffectPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			cs.GuiEffectPlayer o = obj.GetGuiEffectPlayer();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToButton(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			cs.GuiButton o = obj.ToButton();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			cs.GuiImage o = obj.ToImage();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToParticle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiControl obj = (cs.GuiControl)ToLua.CheckObject<cs.GuiControl>(L, 1);
			cs.GuiParticleSystem o = obj.ToParticle();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SortingOrderOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiControl obj = (cs.GuiControl)o;
			int ret = obj.SortingOrderOffset;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SortingOrderOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_guiState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiControl obj = (cs.GuiControl)o;
			cs.EGuiState ret = obj.guiState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guiState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiControl obj = (cs.GuiControl)o;
			int ret = obj.ID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ID on a nil value");
		}
	}
}

