//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class cs_GuiObjectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(cs.GuiObject), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("GetControl", GetControl);
		L.RegFunction("SetOpenLayer", SetOpenLayer);
		L.RegFunction("SetOpenOrder", SetOpenOrder);
		L.RegFunction("MoveToFront", MoveToFront);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Visible", get_Visible, null);
		L.RegVar("GuiBinder", get_GuiBinder, null);
		L.RegVar("State", get_State, null);
		L.RegVar("GuiLayer", get_GuiLayer, null);
		L.RegVar("OpenOrder", get_OpenOrder, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.Initialize(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
				obj.Show();
				return 0;
			}
			else if (count == 2)
			{
				cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Show(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: cs.GuiObject.Show");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
				obj.Hide();
				return 0;
			}
			else if (count == 2)
			{
				cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Hide(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: cs.GuiObject.Hide");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			cs.GuiControl o = obj.GetControl(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOpenLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
			cs.EGuiLayer arg0 = (cs.EGuiLayer)ToLua.CheckObject(L, 2, typeof(cs.EGuiLayer));
			obj.SetOpenLayer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOpenOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetOpenOrder(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToFront(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
				obj.MoveToFront();
				return 0;
			}
			else if (count == 2)
			{
				cs.GuiObject obj = (cs.GuiObject)ToLua.CheckObject<cs.GuiObject>(L, 1);
				cs.EGuiLayer arg0 = (cs.EGuiLayer)ToLua.CheckObject(L, 2, typeof(cs.EGuiLayer));
				obj.MoveToFront(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: cs.GuiObject.MoveToFront");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiObject obj = (cs.GuiObject)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiObject obj = (cs.GuiObject)o;
			bool ret = obj.Visible;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GuiBinder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiObject obj = (cs.GuiObject)o;
			cs.ComGuiBinderBase ret = obj.GuiBinder;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GuiBinder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiObject obj = (cs.GuiObject)o;
			cs.EGuiState ret = obj.State;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GuiLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiObject obj = (cs.GuiObject)o;
			cs.EGuiLayer ret = obj.GuiLayer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GuiLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OpenOrder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiObject obj = (cs.GuiObject)o;
			int ret = obj.OpenOrder;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OpenOrder on a nil value");
		}
	}
}

