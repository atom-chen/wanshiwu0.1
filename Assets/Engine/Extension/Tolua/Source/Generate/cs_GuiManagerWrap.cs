//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class cs_GuiManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(cs.GuiManager), typeof(cs.Singleton<cs.GuiManager>));
		L.RegFunction("CreateGuiScene", CreateGuiScene);
		L.RegFunction("DestroyGuiScene", DestroyGuiScene);
		L.RegFunction("GetGuiScene", GetGuiScene);
		L.RegFunction("GetMaxOrderInLayer", GetMaxOrderInLayer);
		L.RegFunction("ResetOrderInLayer", ResetOrderInLayer);
		L.RegFunction("New", _Createcs_GuiManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("UIRoot", get_UIRoot, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createcs_GuiManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				cs.GuiManager obj = new cs.GuiManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: cs.GuiManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGuiScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiManager obj = (cs.GuiManager)ToLua.CheckObject<cs.GuiManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			cs.GuiScene o = obj.CreateGuiScene(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyGuiScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiManager obj = (cs.GuiManager)ToLua.CheckObject<cs.GuiManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DestroyGuiScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuiScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiManager obj = (cs.GuiManager)ToLua.CheckObject<cs.GuiManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			cs.GuiScene o = obj.GetGuiScene(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaxOrderInLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cs.GuiManager obj = (cs.GuiManager)ToLua.CheckObject<cs.GuiManager>(L, 1);
			cs.EGuiLayer arg0 = (cs.EGuiLayer)ToLua.CheckObject(L, 2, typeof(cs.EGuiLayer));
			int o = obj.GetMaxOrderInLayer(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetOrderInLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				cs.GuiManager obj = (cs.GuiManager)ToLua.CheckObject<cs.GuiManager>(L, 1);
				cs.EGuiLayer arg0 = (cs.EGuiLayer)ToLua.CheckObject(L, 2, typeof(cs.EGuiLayer));
				obj.ResetOrderInLayer(arg0);
				return 0;
			}
			else if (count == 3)
			{
				cs.GuiManager obj = (cs.GuiManager)ToLua.CheckObject<cs.GuiManager>(L, 1);
				cs.EGuiLayer arg0 = (cs.EGuiLayer)ToLua.CheckObject(L, 2, typeof(cs.EGuiLayer));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.ResetOrderInLayer(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: cs.GuiManager.ResetOrderInLayer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			cs.GuiManager obj = (cs.GuiManager)o;
			UnityEngine.GameObject ret = obj.UIRoot;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIRoot on a nil value");
		}
	}
}

